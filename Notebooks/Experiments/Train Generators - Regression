{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Train Generators - Regression","provenance":[],"machine_shape":"hm","collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"oIgTnzotBfar"},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","import IPython.display as display\n","import keras as Keras\n","from tensorflow.keras import layers"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ykPiLp_roDZo","executionInfo":{"status":"ok","timestamp":1658683317694,"user_tz":-330,"elapsed":3018,"user":{"displayName":"Aryan Kaul","userId":"12048495716240843067"}},"outputId":"20ac26ec-f76d-4149-962c-d5923015c5e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["freq_labelled = np.load('/content/drive/MyDrive/TIFR_internship /gamma_doradus_frequencies.npy',allow_pickle = True)\n","g_mode_spacing = np.load('/content/drive/MyDrive/TIFR_internship /param_2.npy',allow_pickle = True)"],"metadata":{"id":"cZcyyxcNhfWT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["freq_labelled"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DhjUK4H44_pd","executionInfo":{"status":"ok","timestamp":1658683322297,"user_tz":-330,"elapsed":6,"user":{"displayName":"Aryan Kaul","userId":"12048495716240843067"}},"outputId":"998f7368-357d-476f-822e-1c2fe6ea7863"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([array([1.45425483, 1.46864058, 1.48371137, 1.49946719, 1.51590805,\n","              1.53371898, 1.55289998, 1.57276602, 1.59468717, 1.61729335,\n","              1.64195464, 1.66867103, 1.6967575 , 1.72758411, 1.76046582,\n","              1.79608768, 1.83513472, 1.87829198])                       ,\n","       array([1.00692647, 1.01172172, 1.01583194, 1.02062719, 1.02610747,\n","              1.03090272, 1.03706805, 1.04323337, 1.04939869, 1.05693408,\n","              1.06446948, 1.07200487, 1.08091034, 1.09050084, 1.10077637,\n","              1.11242198])                                               ,\n","       array([1.65360024, 1.65771046, 1.66182067, 1.66661592, 1.67141117,\n","              1.67689146, 1.68168671, 1.687167  , 1.69333232, 1.69949764,\n","              1.70566296, 1.71251332, 1.72004871, 1.72758411, 1.7351195 ,\n","              1.74402497, 1.75293043, 1.76252093, 1.77279647, 1.78375704,\n","              1.79540265, 1.80841833])                                   ,\n","       ...,\n","       array([3.11204141, 3.11546659, 3.11820673, 3.12163191, 3.12505709,\n","              3.12848227, 3.13259248, 3.13670269, 3.14081291, 3.14492312,\n","              3.14971837, 3.15451362, 3.15999391, 3.1654742 , 3.17095448,\n","              3.17711981, 3.18397016, 3.19082052, 3.19835591, 3.20657634,\n","              3.21548181, 3.22438727, 3.23466281, 3.24562338, 3.25795403,\n","              3.27096971, 3.28467042, 3.30042624, 3.31755214, 3.33741818,\n","              3.35865429, 3.38263054])                                   ,\n","       array([2.07147207, 2.10024357, 2.10298371, 2.10640889, 2.10914903,\n","              2.11188918, 2.11531436, 2.11873953, 2.12216471, 2.12558989,\n","              2.12901507, 2.13244025, 2.13655046, 2.13997564, 2.14408586,\n","              2.14819607])                                               ,\n","       array([1.64811996, 1.65154514, 1.65428528, 1.65839549, 1.66182067,\n","              1.66524585, 1.66935607, 1.67278125, 1.67689146])           ],\n","      dtype=object)"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["g_mode_spacing"],"metadata":{"id":"4pbOzn3P9m9-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658683324643,"user_tz":-330,"elapsed":5,"user":{"displayName":"Aryan Kaul","userId":"12048495716240843067"}},"outputId":"3edc8abe-6b98-4862-9084-4655ae0d357e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.0510049 , 0.17810393, 0.10481929, ..., 0.15358216, 0.059644  ,\n","       0.05850256])"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(freq_labelled, g_mode_spacing, test_size = 0.2,random_state = 100)"],"metadata":{"id":"SFhftvrT-Sdf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def data_generator(data_x,data_y,batch_size=10):              \n","    \"\"\"\n","    Yields the next training batch.\n","    \"\"\"\n","    while True:   \n","        for offset in range(0, data_x.shape[0], batch_size):\n","            #print ('starting index: ', offset) \n","            # Get the samples you'll use in this batch\n","            batch_samples = data_x[offset:offset+batch_size]\n","            #print(batch_samples)\n","            # Initialise X_train and y_train arrays for this batch\n","            X_train = batch_samples[0]\n","            X_train = np.expand_dims(X_train,axis = 1)\n","            y_train = data_y[offset:offset+batch_size]\n","            \n","            # Make sure they're numpy arrays (as opposed to lists)\n","            X_train = np.array(X_train)\n","            #X_train = np.rollaxis(X_train,1,4)\n","            y_train = np.array(y_train)\n","            # yield the next training batch            \n","            yield X_train, y_train"],"metadata":{"id":"lkHe43e6RncN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_generator = data_generator(X_train,y_train,batch_size = 1)\n","x,y = next(train_generator)\n","test_generator = data_generator(X_test,y_test,batch_size = 1)\n","x,y = next(test_generator)"],"metadata":{"id":"ydkxtTkergKj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","#functional model implementation\n","visible = Keras.Input(shape=(None,1))\n","x = visible\n","x = layers.LSTM(128,return_sequences = True)(x)\n","x = layers.LSTM(128,return_sequences=True)(x)\n","init_outputs = layers.Dense(64)(x)\n","pooling_1 = tf.keras.layers.GlobalAveragePooling1D()(init_outputs)\n","#pooling_2 = tf.keras.layers.GlobalMaxPooling1D()(init_outputs)\n","outputs = pooling_1#,pooling_2]\n","final = layers.Dense(1, activation = 'linear')(outputs)\n","model = tf.keras.Model(inputs=visible, outputs=final, name=\"RNN_functional_model\")\n","\n","#model.compile(loss= tf.keras.losses.SparseCategoricalCrossentropy(),\n","             #optimizer=tf.keras.optimizers.Adam(learning_rate = 1e-5),\n","              #metrics=[\"accuracy\"])\n","model.compile(loss= tf.keras.losses.mae,\n","             optimizer=tf.keras.optimizers.Adam(learning_rate = 1e-5),\n","              metrics=[\"mae\"])\n","\n"],"metadata":{"id":"w6YPFb93vYsy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#generator model fitting train,test\n","hist = model.fit_generator(train_generator,epochs = 1,steps_per_epoch = len(X_train),validation_data = test_generator,validation_steps = len(X_test))\n","hist"],"metadata":{"id":"tAYpWVh6sM7K","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b653c825-245d-4503-a5ff-001b0510a4fd","executionInfo":{"status":"ok","timestamp":1658688022560,"user_tz":-330,"elapsed":758660,"user":{"displayName":"Aryan Kaul","userId":"12048495716240843067"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \n"]},{"output_type":"stream","name":"stdout","text":["158403/158403 [==============================] - 758s 5ms/step - loss: 0.0655 - mae: 0.0630 - val_loss: 0.0650 - val_mae: 0.0630\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f24563bf750>"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["print(hist.history.keys())\n","# \"Loss\"\n","plt.plot(hist.history['loss'])\n","plt.plot(hist.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train','val_loss'], loc='upper left')\n","plt.show()"],"metadata":{"id":"jdEpDCGUV5hk"},"execution_count":null,"outputs":[]}]}